"""
给你 n 个非负整数 a1，a2，...，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i,
ai) 和 (i, 0) 。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。

 说明：你不能倾斜容器。

 示例 1：
输入：[1,8,6,2,5,4,8,3,7]
输出：49
解释：图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。

 示例 2：
输入：height = [1,1]
输出：1

 示例 3：
输入：height = [4,3,2,1,4]
输出：16

 示例 4：
输入：height = [1,2,1]
输出：2

 提示：
 n = height.length
 2 <= n <= 3 * 104
 0 <= height[i] <= 3 * 104

 Related Topics 数组 双指针
"""

'''
思路: 设置双指针i,j分别位于容器壁两端，根据规则移动指针，并且更新面积最大值 res，
      直到 i == j 时返回 res。
      无论是移动短板或者长板，我们都只关注移动后的新短板会不会变长，而每次移动的木板都只有三种情况，
      比原短板短，比原短板长，与原短板相等；如向内移动长板，对于新的木板：
      1.比原短板短，则新短板更短。2.与原短板相等或者比原短板长，则新短板不变。
      所以，向内移动长板，一定不能使新短板变长。
'''


def max_area(nums):
    i, j, res = 0, len(nums)-1, 0
    while i < j:
        if nums[i] < nums[j]:
            res = max(nums[i] * (j - i), res)
            i += 1
        else:
            res = max(nums[j] * (j - i), res)
            j -= 1
    print(res)

max_area([1,8,6,2,5,4,8,3,7])