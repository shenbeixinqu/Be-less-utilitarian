"""
给定一个非负整数数组 nums ，你最初位于数组的 第一个下标 。
 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 判断你是否能够到达最后一个下标。

 示例 1：
输入：nums = [2,3,1,1,4]
输出：true
解释：可以先跳 1 步，从下标 0 到达下标 1, 然后再从下标 1 跳 3 步到达最后一个下标。

 示例 2：
输入：nums = [3,2,1,0,4]
输出：false
解释：无论怎样，总会到达下标为 3 的位置。但该下标的最大跳跃长度是 0 ， 所以永远不可能到达最后一个下标。

 提示：
 1 <= nums.length <= 3 * 104
 0 <= nums[i] <= 105
 Related Topics 贪心算法 数组
 👍 1221 👎 0
 """

"""
思路:
    如果能到达某个位置,那一定能到达它前面的所有位置,
    初始化最远位置为0,然后遍历数组,如果当前位置能到达,并且当前位置+跳数>最远位置
    就更薪最远位置,最后比较最远位置和数组长达
"""


def can_jump(nums):
    max_val = 0
    for (i, jump) in enumerate(nums):
        if i <= max_val < i + jump:
            max_val = i + jump
    print(max_val >= i)
    return max_val >= i


can_jump([3,4,1,0,4])
