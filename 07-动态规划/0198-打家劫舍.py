"""
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，
影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上
被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

 示例 1：
输入：[1,2,3,1]
输出：4
解释：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。

 示例 2：
输入：[2,7,9,3,1]
输出：12
解释：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 。

 提示：
 1 <= nums.length <= 100
 0 <= nums[i] <= 400

 Related Topics 动态规划
 👍 1481 👎 0
"""

"""
思路:
    状态定义:
        设动态规划列表dp,dp[i]代表前i个房子在满足条件下能偷窃的最高金额
    转移方程:
        设: 有n个房子,能偷的最大金额为dp[n],前n-1间能偷到的最高金额是dp[n-1]
            此时加一间房,房间值为num
        加房后:因为不能抢相邻的,抢n+1就不能抢n,那么前n+1间房能偷到的最高金额
        dp[n+1],一般是以下两种情况的最大值
        1.不抢n+1 等于前n个房间的最高金额 dp[n+1] = dp[n]
        2.抢n+1   不能抢第n个房间 dp[n+1] = dp[n-1] + num 
    dp[n+1] = max(dp[n], dp[n-1]+num)    
"""


def rob(nums):
    cur, pre = 0, 0
    for num in nums:
        cur, pre = max(pre+num, cur), cur
    return cur


rob([2, 23, 9, 3, 20])
