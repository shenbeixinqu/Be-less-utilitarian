"""
你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。
这个地方所有的房屋都 围成一圈 ，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的
房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警 。

 给定一个代表每个房屋存放金额的非负整数数组，计算你 在不触动警报装置的情况下 ，今晚能够偷窃到的最高金额。

 示例 1：
输入：nums = [2,3,2]
输出：3
解释：你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

 示例 2：
输入：nums = [1,2,3,1]
输出：4
解释：你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

 示例 3：
输入：nums = [0]
输出：0

 提示：
 1 <= nums.length <= 100
 0 <= nums[i] <= 1000

 Related Topics 动态规划
 👍 686 👎 0
"""

"""
思路:
    环状排列以为着第一个和最后一个房子只能选择一个偷窃,可以把环状排列
    房间约化为两个单排排列房间问题
    1.在不偷窃第一个房子的情况下(nums[1:]),最大金额为p1
    2.在不偷窃最后一个房子的情况下,(nums[:n-1]),最大金额为p2
    综合最大偷窃金额 max(p1,p2)    
"""


def rob(nums):
    def my_rob(counters):
        """
        :type counters: list
        """
        [cur, pre] = [0, 0]
        for num in counters:
            cur, pre = max(pre + num, cur), cur
        return cur

    print(max(my_rob(nums[:-1]), my_rob(nums[1:])) if len(nums) != 1 else nums[0])
    return max(my_rob(nums[:-1]), my_rob(nums[1:])) if len(nums) != 1 else nums[0]


rob([2, 23, 9, 3, 20])
